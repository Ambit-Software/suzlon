//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SuzlonBPP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SuzlonBPPEntities : DbContext
    {
        public SuzlonBPPEntities()
            : base("name=SuzlonBPPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<AddandomDetail> AddandomDetails { get; set; }
        public virtual DbSet<AddandomWorkflowStatu> AddandomWorkflowStatus { get; set; }
        public virtual DbSet<ApplicationConfiguration> ApplicationConfigurations { get; set; }
        public virtual DbSet<BankComment> BankComments { get; set; }
        public virtual DbSet<BankDetail> BankDetails { get; set; }
        public virtual DbSet<BankDetailAudit> BankDetailAudits { get; set; }
        public virtual DbSet<BankDetailHistory> BankDetailHistories { get; set; }
        public virtual DbSet<BankWorkflow> BankWorkflows { get; set; }
        public virtual DbSet<BankWorkflowStatu> BankWorkflowStatus { get; set; }
        public virtual DbSet<CompanyMaster> CompanyMasters { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<FileUpload> FileUploads { get; set; }
        public virtual DbSet<IFSCCodeMaster> IFSCCodeMasters { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuAccess> MenuAccesses { get; set; }
        public virtual DbSet<NatureRequestMaster> NatureRequestMasters { get; set; }
        public virtual DbSet<PaymentDetailAdvance> PaymentDetailAdvances { get; set; }
        public virtual DbSet<PaymentDetailAdvanceTxn> PaymentDetailAdvanceTxns { get; set; }
        public virtual DbSet<PaymentDetailAgainstBill> PaymentDetailAgainstBills { get; set; }
        public virtual DbSet<PaymentDetailAgainstBillTxn> PaymentDetailAgainstBillTxns { get; set; }
        public virtual DbSet<PaymentWorkflow> PaymentWorkflows { get; set; }
        public virtual DbSet<PaymentWorkflowStatu> PaymentWorkflowStatus { get; set; }
        public virtual DbSet<ProfileMaster> ProfileMasters { get; set; }
        public virtual DbSet<SAPAdvancePayment> SAPAdvancePayments { get; set; }
        public virtual DbSet<SAPAgainstBillPayment> SAPAgainstBillPayments { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<SubVerticalMaster> SubVerticalMasters { get; set; }
        public virtual DbSet<TreasuryComment> TreasuryComments { get; set; }
        public virtual DbSet<TreasuryNatureRequestDetail> TreasuryNatureRequestDetails { get; set; }
        public virtual DbSet<TreasuryWorkflow> TreasuryWorkflows { get; set; }
        public virtual DbSet<TreasuryWorkflowStatu> TreasuryWorkflowStatus { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VendorBankMaster> VendorBankMasters { get; set; }
        public virtual DbSet<VendorMaster> VendorMasters { get; set; }
        public virtual DbSet<VerticalMaster> VerticalMasters { get; set; }
        public virtual DbSet<WorkflowAudit> WorkflowAudits { get; set; }
        public virtual DbSet<WorkflowConfiguration> WorkflowConfigurations { get; set; }
        public virtual DbSet<VendorBankMaster_Staging> VendorBankMaster_Staging { get; set; }
        public virtual DbSet<VendorMaster_Staging> VendorMaster_Staging { get; set; }
        public virtual DbSet<TreasuryDetail> TreasuryDetails { get; set; }
        public virtual DbSet<TreasuryBudgetUtilisation> TreasuryBudgetUtilisations { get; set; }
        public virtual DbSet<AddendumComment> AddendumComments { get; set; }
        public virtual DbSet<PaymentAllocationDetail> PaymentAllocationDetails { get; set; }
        public virtual DbSet<PaymentInitiationMail> PaymentInitiationMails { get; set; }
        public virtual DbSet<PayReverseReason> PayReverseReasons { get; set; }
    
        public virtual ObjectResult<GetBankComment_Result> GetBankComment(Nullable<int> bankDetailId, Nullable<int> userId)
        {
            var bankDetailIdParameter = bankDetailId.HasValue ?
                new ObjectParameter("BankDetailId", bankDetailId) :
                new ObjectParameter("BankDetailId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankComment_Result>("GetBankComment", bankDetailIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetSubVerticalByVertical_Result> GetSubVerticalByVertical(string verticalIds)
        {
            var verticalIdsParameter = verticalIds != null ?
                new ObjectParameter("VerticalIds", verticalIds) :
                new ObjectParameter("VerticalIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubVerticalByVertical_Result>("GetSubVerticalByVertical", verticalIdsParameter);
        }
    
        public virtual ObjectResult<GetAllUserDetail_Result> GetAllUserDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserDetail_Result>("GetAllUserDetail");
        }
    
        public virtual ObjectResult<GetBankAuditTrailDetail_Result> GetBankAuditTrailDetail(Nullable<int> bankDetailId)
        {
            var bankDetailIdParameter = bankDetailId.HasValue ?
                new ObjectParameter("BankDetailId", bankDetailId) :
                new ObjectParameter("BankDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankAuditTrailDetail_Result>("GetBankAuditTrailDetail", bankDetailIdParameter);
        }
    
        public virtual ObjectResult<string> usp_GetNextStageUserEmailId(Nullable<int> bankDetailId, Nullable<bool> isForApproved)
        {
            var bankDetailIdParameter = bankDetailId.HasValue ?
                new ObjectParameter("BankDetailId", bankDetailId) :
                new ObjectParameter("BankDetailId", typeof(int));
    
            var isForApprovedParameter = isForApproved.HasValue ?
                new ObjectParameter("IsForApproved", isForApproved) :
                new ObjectParameter("IsForApproved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetNextStageUserEmailId", bankDetailIdParameter, isForApprovedParameter);
        }
    
        public virtual ObjectResult<GetBankPendingRecords_Result> GetBankPendingRecords(string vendorCode, string companyCode, Nullable<int> userId)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankPendingRecords_Result>("GetBankPendingRecords", vendorCodeParameter, companyCodeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetWorkFlowkAuditTrailDetail_Result> GetWorkFlowkAuditTrailDetail(Nullable<int> workFlowTypeId, string subVerticalId)
        {
            var workFlowTypeIdParameter = workFlowTypeId.HasValue ?
                new ObjectParameter("WorkFlowTypeId", workFlowTypeId) :
                new ObjectParameter("WorkFlowTypeId", typeof(int));
    
            var subVerticalIdParameter = subVerticalId != null ?
                new ObjectParameter("SubVerticalId", subVerticalId) :
                new ObjectParameter("SubVerticalId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkFlowkAuditTrailDetail_Result>("GetWorkFlowkAuditTrailDetail", workFlowTypeIdParameter, subVerticalIdParameter);
        }
    
        public virtual ObjectResult<usp_GetBankDetailWorkFlowLog_Result> usp_GetBankDetailWorkFlowLog(Nullable<int> bankDetailId)
        {
            var bankDetailIdParameter = bankDetailId.HasValue ?
                new ObjectParameter("BankDetailId", bankDetailId) :
                new ObjectParameter("BankDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBankDetailWorkFlowLog_Result>("usp_GetBankDetailWorkFlowLog", bankDetailIdParameter);
        }
    
        [DbFunction("SuzlonBPPEntities", "fnSplit")]
        public virtual IQueryable<fnSplit_Result> fnSplit(string sep, string str)
        {
            var sepParameter = sep != null ?
                new ObjectParameter("sep", sep) :
                new ObjectParameter("sep", typeof(string));
    
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplit_Result>("[SuzlonBPPEntities].[fnSplit](@sep, @str)", sepParameter, strParameter);
        }
    
        public virtual int sp_GetAmountAdvance(Nullable<int> verticalID, ObjectParameter totalAmount, ObjectParameter proposedTotal, ObjectParameter approvedTotal, ObjectParameter todaysPaidTotal)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAmountAdvance", verticalIDParameter, totalAmount, proposedTotal, approvedTotal, todaysPaidTotal);
        }
    
        public virtual int sp_GetAmounts(Nullable<int> verticalID, string companyCode, ObjectParameter totalAmount, ObjectParameter proposedTotal, ObjectParameter approvedTotal, ObjectParameter tdaysPaidTotal)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAmounts", verticalIDParameter, companyCodeParameter, totalAmount, proposedTotal, approvedTotal, tdaysPaidTotal);
        }
    
        public virtual int usp_InsertVendorBankMasterFromStaging()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertVendorBankMasterFromStaging");
        }
    
        public virtual int InsertVendorMasterFromStaging()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertVendorMasterFromStaging");
        }
    
        public virtual ObjectResult<usp_Get_BankDoc_Pending_Record_Result> usp_Get_BankDoc_Pending_Record(string vendorCode, string companyCode, Nullable<int> userId)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Get_BankDoc_Pending_Record_Result>("usp_Get_BankDoc_Pending_Record", vendorCodeParameter, companyCodeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAgainstBillApproverData_Result> sp_GetAgainstBillApproverData(Nullable<int> verticalID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAgainstBillApproverData_Result>("sp_GetAgainstBillApproverData", verticalIDParameter);
        }
    
        public virtual int sp_GetAmountAgainstBill(Nullable<int> verticalID, ObjectParameter totalAmount, ObjectParameter proposedTotal, ObjectParameter approvedTotal, ObjectParameter todaysPaidTotal)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAmountAgainstBill", verticalIDParameter, totalAmount, proposedTotal, approvedTotal, todaysPaidTotal);
        }
    
        public virtual ObjectResult<GetCompanyData_Result> GetCompanyData(Nullable<int> verticalID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyData_Result>("GetCompanyData", verticalIDParameter);
        }
    
        public virtual ObjectResult<sp_GetVentorItems_Result> sp_GetVentorItems(Nullable<int> verticalID, string companyCode, string vendorCode)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetVentorItems_Result>("sp_GetVentorItems", verticalIDParameter, companyCodeParameter, vendorCodeParameter);
        }
    
        public virtual ObjectResult<GetVendorData_Result> GetVendorData(Nullable<int> verticalID, string companyId)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorData_Result>("GetVendorData", verticalIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<usp_GetInitiatorDocSentPending_Result> GetInitiatorDocSentPending(string vendorCode, string companyCode, Nullable<int> userId)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetInitiatorDocSentPending_Result>("GetInitiatorDocSentPending", vendorCodeParameter, companyCodeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetBankWorkFlowApprovalLog_Result> GetBankWorkFlowApprovalLog(Nullable<int> bankDetailId)
        {
            var bankDetailIdParameter = bankDetailId.HasValue ?
                new ObjectParameter("BankDetailId", bankDetailId) :
                new ObjectParameter("BankDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBankWorkFlowApprovalLog_Result>("GetBankWorkFlowApprovalLog", bankDetailIdParameter);
        }
    
        public virtual ObjectResult<GetTreasuryMyRequest_Result> GetTreasuryMyRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreasuryMyRequest_Result>("GetTreasuryMyRequest", userIdParameter);
        }
    
        public virtual ObjectResult<GetVendorDataForFnA_Result> GetVendorDataForFnA(Nullable<int> verticalID, string companyID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorDataForFnA_Result>("GetVendorDataForFnA", verticalIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetVentorItemsForFnA_Result> GetVentorItemsForFnA(Nullable<int> verticalID, string companyCode, string vendorCode)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVentorItemsForFnA_Result>("GetVentorItemsForFnA", verticalIDParameter, companyCodeParameter, vendorCodeParameter);
        }
    
        public virtual ObjectResult<GetCompanyDataForFnA_Result> GetCompanyDataForFnA(Nullable<int> verticalID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyDataForFnA_Result>("GetCompanyDataForFnA", verticalIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyDataAgainstBillFnA_Result> GetCompanyDataAgainstBillFnA(Nullable<int> verticalID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyDataAgainstBillFnA_Result>("GetCompanyDataAgainstBillFnA", verticalIDParameter);
        }
    
        public virtual ObjectResult<GetVendorDataAgainstBillFnA_Result> GetVendorDataAgainstBillFnA(Nullable<int> verticalID, string companyID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorDataAgainstBillFnA_Result>("GetVendorDataAgainstBillFnA", verticalIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetVentorItemsAgainstBillForFnA_Result1> GetVentorItemsAgainstBillForFnA(Nullable<int> verticalID, string companyCode, string vendorCode)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVentorItemsAgainstBillForFnA_Result1>("GetVentorItemsAgainstBillForFnA", verticalIDParameter, companyCodeParameter, vendorCodeParameter);
        }
    
        public virtual ObjectResult<GetTreasuryMyApprovedRequest_Result> usp_GetTreasuryMyApprovedRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreasuryMyApprovedRequest_Result>("usp_GetTreasuryMyApprovedRequest", userIdParameter);
        }
    
        public virtual ObjectResult<GetVendorCodeForWorkflow_Result> GetVendorCodeForWorkflow(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorCodeForWorkflow_Result>("GetVendorCodeForWorkflow", userIdParameter);
        }
    
        [DbFunction("SuzlonBPPEntities", "GetVendorCode")]
        public virtual IQueryable<GetVendorCode_Result> GetVendorCode(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetVendorCode_Result>("[SuzlonBPPEntities].[GetVendorCode](@UserId)", userIdParameter);
        }
    
        public virtual int usp_GetTreasuryMyAddendumRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetTreasuryMyAddendumRequest", userIdParameter);
        }
    
        public virtual int usp_GetTreasuryPendingRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetTreasuryPendingRequest", userIdParameter);
        }
    
        public virtual ObjectResult<GetTreasuryMyAddendumRequest_Result> GetTreasuryMyAddendumRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreasuryMyAddendumRequest_Result>("GetTreasuryMyAddendumRequest", userIdParameter);
        }
    
        public virtual ObjectResult<GetTreasuryPendingRequest_Result> GetTreasuryPendingRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreasuryPendingRequest_Result>("GetTreasuryPendingRequest", userIdParameter);
        }
    
        public virtual ObjectResult<GetTreasuryPendingAddendumRequest_Result> GetTreasuryPendingAddendumRequest(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreasuryPendingAddendumRequest_Result>("GetTreasuryPendingAddendumRequest", userIdParameter);
        }
    
        public virtual ObjectResult<GetTreasuryRequestApproveByMe_Result> GetTreasuryRequestApproveByMe(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreasuryRequestApproveByMe_Result>("GetTreasuryRequestApproveByMe", userIdParameter);
        }
    
        public virtual ObjectResult<GetTreasuryRequestToCB_Result> GetTreasuryRequestToCB(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreasuryRequestToCB_Result>("GetTreasuryRequestToCB", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTodayApprovedAdvanceAmtFnA(string vendorId)
        {
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTodayApprovedAdvanceAmtFnA", vendorIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTodayApprovedAgaBillAmtFnA(string vendorId)
        {
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTodayApprovedAgaBillAmtFnA", vendorIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetVerticalBudgetForFnA(Nullable<int> verticalId)
        {
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetVerticalBudgetForFnA", verticalIdParameter);
        }
    
        public virtual ObjectResult<GetVendorNameBasedOnCode_Result> GetVendorNameBasedOnCode(string vendorCodes)
        {
            var vendorCodesParameter = vendorCodes != null ?
                new ObjectParameter("VendorCodes", vendorCodes) :
                new ObjectParameter("VendorCodes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorNameBasedOnCode_Result>("GetVendorNameBasedOnCode", vendorCodesParameter);
        }
    
        public virtual ObjectResult<GetApproverCompByVendor_Result> GetApproverCompByVendor(Nullable<int> verticalID, string vendorCode, Nullable<int> userID, string billType, string tabName)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApproverCompByVendor_Result>("GetApproverCompByVendor", verticalIDParameter, vendorCodeParameter, userIDParameter, billTypeParameter, tabNameParameter);
        }
    
        public virtual ObjectResult<GetApproverEndItems_Result> GetApproverEndItems(Nullable<int> verticalID, string companyCode, string vendorCode, Nullable<int> userID, string billType, string tabName)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApproverEndItems_Result>("GetApproverEndItems", verticalIDParameter, companyCodeParameter, vendorCodeParameter, userIDParameter, billTypeParameter, tabNameParameter);
        }
    
        public virtual ObjectResult<GetApproverVendorData_Result> GetApproverVendorData(Nullable<int> verticalID, Nullable<int> userID, string billType, string tabName)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApproverVendorData_Result>("GetApproverVendorData", verticalIDParameter, userIDParameter, billTypeParameter, tabNameParameter);
        }
    
        public virtual int chkAccNoExistForVendorAndCompanyCode(Nullable<int> bankDetailId, string accountNo, string ifscCode, string vendorCode, string companyCode, ObjectParameter isExist)
        {
            var bankDetailIdParameter = bankDetailId.HasValue ?
                new ObjectParameter("BankDetailId", bankDetailId) :
                new ObjectParameter("BankDetailId", typeof(int));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var ifscCodeParameter = ifscCode != null ?
                new ObjectParameter("IfscCode", ifscCode) :
                new ObjectParameter("IfscCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("chkAccNoExistForVendorAndCompanyCode", bankDetailIdParameter, accountNoParameter, ifscCodeParameter, vendorCodeParameter, companyCodeParameter, isExist);
        }
    
        public virtual ObjectResult<sp_GetInitiator_Advance_InProcess_Data_Result> sp_GetInitiator_Advance_InProcess_Data(string vendorCode, string companyCode)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInitiator_Advance_InProcess_Data_Result>("sp_GetInitiator_Advance_InProcess_Data", vendorCodeParameter, companyCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetInitiator_AgainstBill_InProcess_Data_Result> sp_GetInitiator_AgainstBill_InProcess_Data(string vendorCode, string companyCode)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInitiator_AgainstBill_InProcess_Data_Result>("sp_GetInitiator_AgainstBill_InProcess_Data", vendorCodeParameter, companyCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetInitiator_Advance_Correction_Data_Result> sp_GetInitiator_Advance_Correction_Data(string vendorCode, string companyCode)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInitiator_Advance_Correction_Data_Result>("sp_GetInitiator_Advance_Correction_Data", vendorCodeParameter, companyCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetInitiator_AgainstBill_Correction_Data_Result> sp_GetInitiator_AgainstBill_Correction_Data(string vendorCode, string companyCode)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInitiator_AgainstBill_Correction_Data_Result>("sp_GetInitiator_AgainstBill_Correction_Data", vendorCodeParameter, companyCodeParameter);
        }
    
        public virtual ObjectResult<GetApprovedEndItemsFnA_Result> GetApprovedEndItemsFnA(Nullable<int> verticalID, string companyCode, string vendorCode, Nullable<int> userID, string billType, string tabName)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApprovedEndItemsFnA_Result>("GetApprovedEndItemsFnA", verticalIDParameter, companyCodeParameter, vendorCodeParameter, userIDParameter, billTypeParameter, tabNameParameter);
        }
    
        public virtual ObjectResult<GetCompanyApprovedDataForFnA_Result> GetCompanyApprovedDataForFnA(Nullable<int> verticalID, string type)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyApprovedDataForFnA_Result>("GetCompanyApprovedDataForFnA", verticalIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetVendorApprovedDataForFnA_Result> GetVendorApprovedDataForFnA(Nullable<int> verticalID, string companyID, string type)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorApprovedDataForFnA_Result>("GetVendorApprovedDataForFnA", verticalIDParameter, companyIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetNextPaymentWorkFlowId_Result> sp_GetNextPaymentWorkFlowId(string companyCode, string vendorCode, string billType, Nullable<int> profileId, Nullable<bool> iSOPENADVANCE, Nullable<decimal> amountTobeAppoved)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var iSOPENADVANCEParameter = iSOPENADVANCE.HasValue ?
                new ObjectParameter("ISOPENADVANCE", iSOPENADVANCE) :
                new ObjectParameter("ISOPENADVANCE", typeof(bool));
    
            var amountTobeAppovedParameter = amountTobeAppoved.HasValue ?
                new ObjectParameter("AmountTobeAppoved", amountTobeAppoved) :
                new ObjectParameter("AmountTobeAppoved", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNextPaymentWorkFlowId_Result>("sp_GetNextPaymentWorkFlowId", companyCodeParameter, vendorCodeParameter, billTypeParameter, profileIdParameter, iSOPENADVANCEParameter, amountTobeAppovedParameter);
        }
    
        public virtual ObjectResult<GetPaymentWorkFlowInProcessDetail_Result> GetPaymentWorkFlowInProcessDetail(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentWorkFlowInProcessDetail_Result>("GetPaymentWorkFlowInProcessDetail", typeParameter);
        }
    
        public virtual int GetTodaysPaymentAmount(ObjectParameter todayApprovedAmount)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTodaysPaymentAmount", todayApprovedAmount);
        }
    
        public virtual ObjectResult<GetCompanyPendingDataForFnA_Result> GetCompanyPendingDataForFnA(Nullable<int> verticalID, Nullable<int> userID, string type)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyPendingDataForFnA_Result>("GetCompanyPendingDataForFnA", verticalIDParameter, userIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetVendorPendingDataForFnA_Result> GetVendorPendingDataForFnA(Nullable<int> verticalID, string companyID, Nullable<int> userID, string type)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorPendingDataForFnA_Result>("GetVendorPendingDataForFnA", verticalIDParameter, companyIDParameter, userIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetTodayApprovedAmtFnA_Result> GetTodayApprovedAmtFnA(string vendorId, string type)
        {
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTodayApprovedAmtFnA_Result>("GetTodayApprovedAmtFnA", vendorIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetCompanyDetailsForFnA_Result> GetCompanyDetailsForFnA(Nullable<int> verticalID, Nullable<int> userID, string billType, string tabName)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyDetailsForFnA_Result>("GetCompanyDetailsForFnA", verticalIDParameter, userIDParameter, billTypeParameter, tabNameParameter);
        }
    
        public virtual ObjectResult<GetVendorDetailsForFnA_Result> GetVendorDetailsForFnA(Nullable<int> verticalID, string companyID, Nullable<int> userID, string billType, string tabName)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorDetailsForFnA_Result>("GetVendorDetailsForFnA", verticalIDParameter, companyIDParameter, userIDParameter, billTypeParameter, tabNameParameter);
        }
    
        public virtual ObjectResult<GetSAPAdvanceIntialData_Result> GetSAPAdvanceIntialData(string vendorCode, string companyCode, string type, Nullable<int> userId)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAPAdvanceIntialData_Result>("GetSAPAdvanceIntialData", vendorCodeParameter, companyCodeParameter, typeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetSAPAgainstBillIntialData_Result> GetSAPAgainstBillIntialData(string vendorCode, string companyCode, string type, Nullable<int> userId)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSAPAgainstBillIntialData_Result>("GetSAPAgainstBillIntialData", vendorCodeParameter, companyCodeParameter, typeParameter, userIdParameter);
        }
    
        public virtual int GetTodayApprovedAmountFnA(string vendorId, string companyId, string type, ObjectParameter todayApprovedAmount)
        {
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTodayApprovedAmountFnA", vendorIdParameter, companyIdParameter, typeParameter, todayApprovedAmount);
        }
    
        public virtual ObjectResult<GetVendorDetailBasedOnSearch_Result> GetVendorDetailBasedOnSearch(string searchText, Nullable<int> userId)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorDetailBasedOnSearch_Result>("GetVendorDetailBasedOnSearch", searchTextParameter, userIdParameter);
        }
    
        public virtual int IsValidPaymentAllocation(string mode, string sAPPaymentIDs1)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var sAPPaymentIDs1Parameter = sAPPaymentIDs1 != null ?
                new ObjectParameter("SAPPaymentIDs1", sAPPaymentIDs1) :
                new ObjectParameter("SAPPaymentIDs1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsValidPaymentAllocation", modeParameter, sAPPaymentIDs1Parameter);
        }
    
        public virtual ObjectResult<GetBudgetAllocationDetails_Result> GetBudgetAllocationDetails(string mode, string sAPPaymentIds)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var sAPPaymentIdsParameter = sAPPaymentIds != null ?
                new ObjectParameter("SAPPaymentIds", sAPPaymentIds) :
                new ObjectParameter("SAPPaymentIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetAllocationDetails_Result>("GetBudgetAllocationDetails", modeParameter, sAPPaymentIdsParameter);
        }
    
        public virtual int InsertAgainstBillPaymentFromStaging()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAgainstBillPaymentFromStaging");
        }
    
        public virtual ObjectResult<string> ValidateAllocationRecords(string mode, string sAPPaymentIDs)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var sAPPaymentIDsParameter = sAPPaymentIDs != null ?
                new ObjectParameter("SAPPaymentIDs", sAPPaymentIDs) :
                new ObjectParameter("SAPPaymentIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateAllocationRecords", modeParameter, sAPPaymentIDsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_TreasuryAllocationsValidate(string mode, string sAPPaymentIDs1)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var sAPPaymentIDs1Parameter = sAPPaymentIDs1 != null ?
                new ObjectParameter("SAPPaymentIDs1", sAPPaymentIDs1) :
                new ObjectParameter("SAPPaymentIDs1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_TreasuryAllocationsValidate", modeParameter, sAPPaymentIDs1Parameter);
        }
    
        public virtual int sp_ValidatePaymentAllocation(string mode, string sAPPaymentIDs1)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var sAPPaymentIDs1Parameter = sAPPaymentIDs1 != null ?
                new ObjectParameter("SAPPaymentIDs1", sAPPaymentIDs1) :
                new ObjectParameter("SAPPaymentIDs1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ValidatePaymentAllocation", modeParameter, sAPPaymentIDs1Parameter);
        }
    
        public virtual ObjectResult<GetItemsForExportToExcel_Result> sp_GetItemsForExportToExcel(Nullable<int> verticalID, Nullable<int> userID, string billType, string tabName)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemsForExportToExcel_Result>("sp_GetItemsForExportToExcel", verticalIDParameter, userIDParameter, billTypeParameter, tabNameParameter);
        }
    
        public virtual int UpdateHouseBank_FromSAP(string companyCode, string houseBank)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var houseBankParameter = houseBank != null ?
                new ObjectParameter("HouseBank", houseBank) :
                new ObjectParameter("HouseBank", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHouseBank_FromSAP", companyCodeParameter, houseBankParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_getVerticalBalance(Nullable<int> verticalID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("verticalID", verticalID) :
                new ObjectParameter("verticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_getVerticalBalance", verticalIDParameter);
        }
    
        public virtual ObjectResult<sp_getVerticalBalanceDetails_Result> sp_getVerticalBalanceDetails(Nullable<int> verticalID)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("verticalID", verticalID) :
                new ObjectParameter("verticalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getVerticalBalanceDetails_Result>("sp_getVerticalBalanceDetails", verticalIDParameter);
        }
    
        public virtual ObjectResult<getExistingVendorDetailByAccountNo> getExistingVendorDetailByAccountNo(string vendorCode, string companyCode, string accountNo)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getExistingVendorDetailByAccountNo>("getExistingVendorDetailByAccountNo", vendorCodeParameter, companyCodeParameter, accountNoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_getBalanceByTreasury(Nullable<int> treasuryDetailId)
        {
            var treasuryDetailIdParameter = treasuryDetailId.HasValue ?
                new ObjectParameter("TreasuryDetailId", treasuryDetailId) :
                new ObjectParameter("TreasuryDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_getBalanceByTreasury", treasuryDetailIdParameter);
        }
    
        public virtual ObjectResult<sp_getBalanceDetailsByTreasury_Result> sp_getBalanceDetailsByTreasury(Nullable<int> treasuryDetailId)
        {
            var treasuryDetailIdParameter = treasuryDetailId.HasValue ?
                new ObjectParameter("TreasuryDetailId", treasuryDetailId) :
                new ObjectParameter("TreasuryDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getBalanceDetailsByTreasury_Result>("sp_getBalanceDetailsByTreasury", treasuryDetailIdParameter);
        }
    
        public virtual int InsertAdvancePaymentFromStaging()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAdvancePaymentFromStaging");
        }
    
        public virtual ObjectResult<usp_GetPaymentInitiatorPopupData_Result> GetPaymentInitiatorPopupData(string vendorCode, string companyCode, string billType)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentInitiatorPopupData_Result>("GetPaymentInitiatorPopupData", vendorCodeParameter, companyCodeParameter, billTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentInitiatorPopupData_Advance_Result> GetPaymentInitiatorPopupData_Advance(string vendorCode, string companyCode, string billType)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentInitiatorPopupData_Advance_Result>("GetPaymentInitiatorPopupData_Advance", vendorCodeParameter, companyCodeParameter, billTypeParameter);
        }
    
        public virtual int DeletePaymentStaggingData(string billType, string companyCode, string vendorCode)
        {
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePaymentStaggingData", billTypeParameter, companyCodeParameter, vendorCodeParameter);
        }
    
        public virtual int GetMaxApproveGroupLineItemNo(ObjectParameter maxLineGroupId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxApproveGroupLineItemNo", maxLineGroupId);
        }
    
        public virtual ObjectResult<sp_GetReverseCaseData_Result> sp_GetReverseCaseData(Nullable<int> sapPaymentId, string billType)
        {
            var sapPaymentIdParameter = sapPaymentId.HasValue ?
                new ObjectParameter("sapPaymentId", sapPaymentId) :
                new ObjectParameter("sapPaymentId", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("billType", billType) :
                new ObjectParameter("billType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReverseCaseData_Result>("sp_GetReverseCaseData", sapPaymentIdParameter, billTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetReversePaymentDetail_Result> sp_GetReversePaymentDetail(Nullable<int> verticalID, string billType)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReversePaymentDetail_Result>("sp_GetReversePaymentDetail", verticalIDParameter, billTypeParameter);
        }
    
        public virtual int sp_UpdateReversePayment(string documentCLearingNo, Nullable<int> reverseReasonId, string billType, Nullable<System.DateTime> reveseDate)
        {
            var documentCLearingNoParameter = documentCLearingNo != null ?
                new ObjectParameter("DocumentCLearingNo", documentCLearingNo) :
                new ObjectParameter("DocumentCLearingNo", typeof(string));
    
            var reverseReasonIdParameter = reverseReasonId.HasValue ?
                new ObjectParameter("ReverseReasonId", reverseReasonId) :
                new ObjectParameter("ReverseReasonId", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var reveseDateParameter = reveseDate.HasValue ?
                new ObjectParameter("ReveseDate", reveseDate) :
                new ObjectParameter("ReveseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateReversePayment", documentCLearingNoParameter, reverseReasonIdParameter, billTypeParameter, reveseDateParameter);
        }
    
        public virtual ObjectResult<Usp_GetReversedPaymentDone_Result> Usp_GetReversedPaymentDone(Nullable<int> verticalID, string billType)
        {
            var verticalIDParameter = verticalID.HasValue ?
                new ObjectParameter("VerticalID", verticalID) :
                new ObjectParameter("VerticalID", typeof(int));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetReversedPaymentDone_Result>("Usp_GetReversedPaymentDone", verticalIDParameter, billTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetTreasuryReportData_Result> usp_GetTreasuryReportData(Nullable<int> verticalId, string allocationNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var allocationNoParameter = allocationNo != null ?
                new ObjectParameter("AllocationNo", allocationNo) :
                new ObjectParameter("AllocationNo", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTreasuryReportData_Result>("usp_GetTreasuryReportData", verticalIdParameter, allocationNoParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetTreasuryPaymentReportData_Result> usp_GetTreasuryPaymentReportData(string companyCode, Nullable<int> verticalId, string treasuryNo, string paymentNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var verticalIdParameter = verticalId.HasValue ?
                new ObjectParameter("VerticalId", verticalId) :
                new ObjectParameter("VerticalId", typeof(int));
    
            var treasuryNoParameter = treasuryNo != null ?
                new ObjectParameter("TreasuryNo", treasuryNo) :
                new ObjectParameter("TreasuryNo", typeof(string));
    
            var paymentNoParameter = paymentNo != null ?
                new ObjectParameter("PaymentNo", paymentNo) :
                new ObjectParameter("PaymentNo", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTreasuryPaymentReportData_Result>("usp_GetTreasuryPaymentReportData", companyCodeParameter, verticalIdParameter, treasuryNoParameter, paymentNoParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Usp_PaymentDetailReportData_Result> Usp_PaymentDetailReportData(string billType, string subvertical, string compCode, string vendorCode, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, string userId)
        {
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var subverticalParameter = subvertical != null ?
                new ObjectParameter("Subvertical", subvertical) :
                new ObjectParameter("Subvertical", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_PaymentDetailReportData_Result>("Usp_PaymentDetailReportData", billTypeParameter, subverticalParameter, compCodeParameter, vendorCodeParameter, fromdateParameter, toDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Usp_PaymentDetailAdvanceReportData_Result> Usp_PaymentDetailAdvanceReportData(string billType, string subvertical, string compCode, string vendorCode, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, string userId)
        {
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var subverticalParameter = subvertical != null ?
                new ObjectParameter("Subvertical", subvertical) :
                new ObjectParameter("Subvertical", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_PaymentDetailAdvanceReportData_Result>("Usp_PaymentDetailAdvanceReportData", billTypeParameter, subverticalParameter, compCodeParameter, vendorCodeParameter, fromdateParameter, toDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetBankDetialsReportData_Result> usp_GetBankDetialsReportData(string companycode, string vendorCode, string vendorName, string initiator)
        {
            var companycodeParameter = companycode != null ?
                new ObjectParameter("Companycode", companycode) :
                new ObjectParameter("Companycode", typeof(string));
    
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var initiatorParameter = initiator != null ?
                new ObjectParameter("Initiator", initiator) :
                new ObjectParameter("Initiator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBankDetialsReportData_Result>("usp_GetBankDetialsReportData", companycodeParameter, vendorCodeParameter, vendorNameParameter, initiatorParameter);
        }
    }
}
