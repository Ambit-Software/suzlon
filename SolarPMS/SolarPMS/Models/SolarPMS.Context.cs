//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SolarPMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SolarPMSEntities : DbContext
    {
        public SolarPMSEntities()
            : base("name=SolarPMSEntities")
        {
            this.SetCommandTimeOut(180);
        }

        public void SetCommandTimeOut(int Timeout)
        {
            var objectContext = (this as IObjectContextAdapter).ObjectContext;
            objectContext.CommandTimeout = Timeout;
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<ErroLog> ErroLogs { get; set; }
        public virtual DbSet<EscalationMatrix> EscalationMatrices { get; set; }
        public virtual DbSet<IssueAttachment> IssueAttachments { get; set; }
        public virtual DbSet<IssueCategory> IssueCategories { get; set; }
        public virtual DbSet<IssueComment> IssueComments { get; set; }
        public virtual DbSet<IssueManagement> IssueManagements { get; set; }
        public virtual DbSet<IssueManagementAudit> IssueManagementAudits { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuAccess> MenuAccesses { get; set; }
        public virtual DbSet<NetWork> NetWorks { get; set; }
        public virtual DbSet<ProfileMaster> ProfileMasters { get; set; }
        public virtual DbSet<SAPMaster> SAPMasters { get; set; }
        public virtual DbSet<SAPMasterStaging> SAPMasterStagings { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<SubActivity> SubActivities { get; set; }
        public virtual DbSet<SurveyMaster> SurveyMasters { get; set; }
        public virtual DbSet<TableActivity> TableActivities { get; set; }
        public virtual DbSet<TaskAllocation> TaskAllocations { get; set; }
        public virtual DbSet<TimesheetActivity> TimesheetActivities { get; set; }
        public virtual DbSet<TimesheetApproval> TimesheetApprovals { get; set; }
        public virtual DbSet<TimesheetAttachment> TimesheetAttachments { get; set; }
        public virtual DbSet<TimesheetBlockDetail> TimesheetBlockDetails { get; set; }
        public virtual DbSet<TimesheetSurveyDetail> TimesheetSurveyDetails { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VillageMaster> VillageMasters { get; set; }
        public virtual DbSet<WBSArea> WBSAreas { get; set; }
        public virtual DbSet<WorkflowStatu> WorkflowStatus { get; set; }
        public virtual DbSet<Activity_temp> Activity_temp { get; set; }
        public virtual DbSet<area_temp> area_temp { get; set; }
        public virtual DbSet<IssueCategoryStaging> IssueCategoryStagings { get; set; }
        public virtual DbSet<LocatioMasterStaging> LocatioMasterStagings { get; set; }
        public virtual DbSet<NetWork_temp> NetWork_temp { get; set; }
        public virtual DbSet<SAPMASTER_BK_15July> SAPMASTER_BK_15July { get; set; }
        public virtual DbSet<subactivity_temp> subactivity_temp { get; set; }
        public virtual DbSet<SurveyMasterStaging> SurveyMasterStagings { get; set; }
        public virtual DbSet<TableMasterStaging> TableMasterStagings { get; set; }
        public virtual DbSet<TaskAllocation_temp> TaskAllocation_temp { get; set; }
        public virtual DbSet<VillageMasterStaging> VillageMasterStagings { get; set; }
        public virtual DbSet<ActivityAssignmentHistory> ActivityAssignmentHistories { get; set; }
        public virtual DbSet<ReportParameter> ReportParameters { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<TableMaster> TableMasters { get; set; }
        public virtual DbSet<LocationMaster> LocationMasters { get; set; }
        public virtual DbSet<DesignEngineerDocument> DesignEngineerDocuments { get; set; }
        public virtual DbSet<ManagerTimesheetActivity> ManagerTimesheetActivities { get; set; }
        public virtual DbSet<ManagerTimesheetBlockDetail> ManagerTimesheetBlockDetails { get; set; }
        public virtual DbSet<ManagerTimesheetSurveyDetail> ManagerTimesheetSurveyDetails { get; set; }
        public virtual DbSet<DocumentReviewDetail> DocumentReviewDetails { get; set; }
        public virtual DbSet<DEDocumentFile> DEDocumentFiles { get; set; }
        public virtual DbSet<DocumentReviewFile> DocumentReviewFiles { get; set; }
        public virtual DbSet<ManPowerMaster> ManPowerMasters { get; set; }
        public virtual DbSet<Timesheet> Timesheets { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<ManPowerDetail> ManPowerDetails { get; set; }
        public virtual DbSet<MaterialStaging> MaterialStagings { get; set; }
        public virtual DbSet<OfflineTimesheet> OfflineTimesheets { get; set; }
        public virtual DbSet<OfflineManPowerDetail> OfflineManPowerDetails { get; set; }
    
        public virtual ObjectResult<GetActivity_Result> GetActivity(Nullable<int> userId, Nullable<int> networkId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var networkIdParameter = networkId.HasValue ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivity_Result>("GetActivity", userIdParameter, networkIdParameter);
        }
    
        public virtual ObjectResult<GetSubActivity_Result> GetSubActivity(Nullable<int> userId, Nullable<int> activityId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubActivity_Result>("GetSubActivity", userIdParameter, activityIdParameter);
        }
    
        public virtual ObjectResult<GetToDoNetWorkList_Result> GetToDoNetWorkList(Nullable<int> userId, Nullable<int> areaId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetToDoNetWorkList_Result>("GetToDoNetWorkList", userIdParameter, areaIdParameter);
        }
    
        public virtual int sp_ProcessSAPMasterData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProcessSAPMasterData");
        }
    
        public virtual int sp_UpdateSAPMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSAPMaster");
        }
    
        public virtual int usp_CopyTaskAllocation(Nullable<int> userId, string copyUserIds, Nullable<int> createdById, string sAPSite, string sAPProjectId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var copyUserIdsParameter = copyUserIds != null ?
                new ObjectParameter("CopyUserIds", copyUserIds) :
                new ObjectParameter("CopyUserIds", typeof(string));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            var sAPProjectIdParameter = sAPProjectId != null ?
                new ObjectParameter("SAPProjectId", sAPProjectId) :
                new ObjectParameter("SAPProjectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CopyTaskAllocation", userIdParameter, copyUserIdsParameter, createdByIdParameter, sAPSiteParameter, sAPProjectIdParameter);
        }
    
        public virtual ObjectResult<TaskAllocationMasterData> usp_GetTaskAllocationData(string projectId, string site, string area, string network, string activity, Nullable<int> flag, Nullable<int> userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var networkParameter = network != null ?
                new ObjectParameter("Network", network) :
                new ObjectParameter("Network", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskAllocationMasterData>("usp_GetTaskAllocationData", projectIdParameter, siteParameter, areaParameter, networkParameter, activityParameter, flagParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTaskAllocationData_Manish_Result> usp_GetTaskAllocationData_Manish(string projectId, string site, string area, string network, string activity, Nullable<int> flag, Nullable<int> userId)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var networkParameter = network != null ?
                new ObjectParameter("Network", network) :
                new ObjectParameter("Network", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaskAllocationData_Manish_Result>("usp_GetTaskAllocationData_Manish", projectIdParameter, siteParameter, areaParameter, networkParameter, activityParameter, flagParameter, userIdParameter);
        }
    
        public virtual ObjectResult<ToDoList> usp_GetToDoList(Nullable<int> userId, Nullable<bool> isFromMobile, string networkId, string areaId, string projectId, string sAPSite, Nullable<int> flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFromMobileParameter = isFromMobile.HasValue ?
                new ObjectParameter("IsFromMobile", isFromMobile) :
                new ObjectParameter("IsFromMobile", typeof(bool));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ToDoList>("usp_GetToDoList", userIdParameter, isFromMobileParameter, networkIdParameter, areaIdParameter, projectIdParameter, sAPSiteParameter, flagParameter);
        }
    
        public virtual ObjectResult<UserForCopy> usp_GetUserForCopy(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserForCopy>("usp_GetUserForCopy", userIdParameter);
        }
    
        public virtual ObjectResult<SAPActivitiesNotAllocated> usp_SAPActivitiesNotAllocated(string sAPProjectId, string sAPSite)
        {
            var sAPProjectIdParameter = sAPProjectId != null ?
                new ObjectParameter("SAPProjectId", sAPProjectId) :
                new ObjectParameter("SAPProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SAPActivitiesNotAllocated>("usp_SAPActivitiesNotAllocated", sAPProjectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<usp_SaveAllActivityInNetwork_Result> usp_SaveAllActivityInNetwork(string projectId, string site, Nullable<int> taskAllocationId, Nullable<int> areaId, string sapNetwork, Nullable<int> createdBy)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var taskAllocationIdParameter = taskAllocationId.HasValue ?
                new ObjectParameter("TaskAllocationId", taskAllocationId) :
                new ObjectParameter("TaskAllocationId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var sapNetworkParameter = sapNetwork != null ?
                new ObjectParameter("SapNetwork", sapNetwork) :
                new ObjectParameter("SapNetwork", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SaveAllActivityInNetwork_Result>("usp_SaveAllActivityInNetwork", projectIdParameter, siteParameter, taskAllocationIdParameter, areaIdParameter, sapNetworkParameter, createdByParameter);
        }
    
        public virtual int usp_SaveAllNetworkInArea(string projectId, string site, Nullable<int> taskAllocationId, Nullable<int> areaId, Nullable<int> createdBy)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var taskAllocationIdParameter = taskAllocationId.HasValue ?
                new ObjectParameter("TaskAllocationId", taskAllocationId) :
                new ObjectParameter("TaskAllocationId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SaveAllNetworkInArea", projectIdParameter, siteParameter, taskAllocationIdParameter, areaIdParameter, createdByParameter);
        }
    
        public virtual int usp_SaveAllSubActivityInActivity(string projectId, string site, Nullable<int> taskAllocationId, Nullable<int> areaId, string sapNetwork, string sapActivity, Nullable<int> createdBy)
        {
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var taskAllocationIdParameter = taskAllocationId.HasValue ?
                new ObjectParameter("TaskAllocationId", taskAllocationId) :
                new ObjectParameter("TaskAllocationId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var sapNetworkParameter = sapNetwork != null ?
                new ObjectParameter("SapNetwork", sapNetwork) :
                new ObjectParameter("SapNetwork", typeof(string));
    
            var sapActivityParameter = sapActivity != null ?
                new ObjectParameter("SapActivity", sapActivity) :
                new ObjectParameter("SapActivity", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SaveAllSubActivityInActivity", projectIdParameter, siteParameter, taskAllocationIdParameter, areaIdParameter, sapNetworkParameter, sapActivityParameter, createdByParameter);
        }
    
        public virtual int usp_SaveTaskAllocationDetails(Nullable<int> userId, string siteId, string projectId, Nullable<int> createdById)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var siteIdParameter = siteId != null ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SaveTaskAllocationDetails", userIdParameter, siteIdParameter, projectIdParameter, createdByIdParameter);
        }
    
        public virtual int usp_TaskDetailsAllocated(string sAPProjectId, string sAPSite)
        {
            var sAPProjectIdParameter = sAPProjectId != null ?
                new ObjectParameter("SAPProjectId", sAPProjectId) :
                new ObjectParameter("SAPProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TaskDetailsAllocated", sAPProjectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<TimesheetActivityDetails> usp_GetTimesheetActivityDetails(Nullable<int> timesheetId)
        {
            var timesheetIdParameter = timesheetId.HasValue ?
                new ObjectParameter("TimesheetId", timesheetId) :
                new ObjectParameter("TimesheetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimesheetActivityDetails>("usp_GetTimesheetActivityDetails", timesheetIdParameter);
        }
    
        public virtual ObjectResult<ToDoListApproved> usp_ToDoListApproved(Nullable<int> userId, Nullable<bool> isFromMobile, string networkId, string areaId, string projectId, string sAPSite)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFromMobileParameter = isFromMobile.HasValue ?
                new ObjectParameter("IsFromMobile", isFromMobile) :
                new ObjectParameter("IsFromMobile", typeof(bool));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ToDoListApproved>("usp_ToDoListApproved", userIdParameter, isFromMobileParameter, networkIdParameter, areaIdParameter, projectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<usp_ToDoListMyRecords_Result> usp_ToDoListMyRecords(Nullable<int> userId, Nullable<bool> isFromMobile, string networkId, string areaId, string projectId, string sAPSite)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFromMobileParameter = isFromMobile.HasValue ?
                new ObjectParameter("IsFromMobile", isFromMobile) :
                new ObjectParameter("IsFromMobile", typeof(bool));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ToDoListMyRecords_Result>("usp_ToDoListMyRecords", userIdParameter, isFromMobileParameter, networkIdParameter, areaIdParameter, projectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<ToDoListPendingForApproval> usp_ToDoListPendingForApproval(Nullable<int> userId, Nullable<bool> isFromMobile, string networkId, string areaId, string projectId, string sAPSite)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFromMobileParameter = isFromMobile.HasValue ?
                new ObjectParameter("IsFromMobile", isFromMobile) :
                new ObjectParameter("IsFromMobile", typeof(bool));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ToDoListPendingForApproval>("usp_ToDoListPendingForApproval", userIdParameter, isFromMobileParameter, networkIdParameter, areaIdParameter, projectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<ToDoListRejected> usp_ToDoListRejected(Nullable<int> userId, Nullable<bool> isFromMobile, string networkId, string areaId, string projectId, string sAPSite)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFromMobileParameter = isFromMobile.HasValue ?
                new ObjectParameter("IsFromMobile", isFromMobile) :
                new ObjectParameter("IsFromMobile", typeof(bool));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ToDoListRejected>("usp_ToDoListRejected", userIdParameter, isFromMobileParameter, networkIdParameter, areaIdParameter, projectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<TimesheetBlockDetailsView> usp_GetTimesheetBlockDetails(Nullable<int> timesheetId, Nullable<bool> isManger, Nullable<short> status)
        {
            var timesheetIdParameter = timesheetId.HasValue ?
                new ObjectParameter("TimesheetId", timesheetId) :
                new ObjectParameter("TimesheetId", typeof(int));
    
            var isMangerParameter = isManger.HasValue ?
                new ObjectParameter("IsManger", isManger) :
                new ObjectParameter("IsManger", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimesheetBlockDetailsView>("usp_GetTimesheetBlockDetails", timesheetIdParameter, isMangerParameter, statusParameter);
        }
    
        public virtual ObjectResult<SubmittedTimesheetDetails> usp_GetSubmittedTimesheetDetails(Nullable<int> userId, Nullable<int> activityId, Nullable<int> subActivityId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            var subActivityIdParameter = subActivityId.HasValue ?
                new ObjectParameter("SubActivityId", subActivityId) :
                new ObjectParameter("SubActivityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubmittedTimesheetDetails>("usp_GetSubmittedTimesheetDetails", userIdParameter, activityIdParameter, subActivityIdParameter);
        }
    
        public virtual ObjectResult<SubmiitedTimesheetAttachment> usp_GetSubmiitedTimesheetAttachment(Nullable<int> activityId, Nullable<int> userId, Nullable<int> subActivityId)
        {
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var subActivityIdParameter = subActivityId.HasValue ?
                new ObjectParameter("SubActivityId", subActivityId) :
                new ObjectParameter("SubActivityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubmiitedTimesheetAttachment>("usp_GetSubmiitedTimesheetAttachment", activityIdParameter, userIdParameter, subActivityIdParameter);
        }
    
        public virtual int usp_UserDisableValidation(Nullable<int> uSERID, ObjectParameter iSDISABLE)
        {
            var uSERIDParameter = uSERID.HasValue ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserDisableValidation", uSERIDParameter, iSDISABLE);
        }
    
        public virtual ObjectResult<string> usp_GetUserEmailIdForNotification(Nullable<int> userId, string profiles, Nullable<int> notificationId, Nullable<int> activityId, Nullable<int> subActivityId, Nullable<int> timesheetId, Nullable<int> assignedTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var profilesParameter = profiles != null ?
                new ObjectParameter("Profiles", profiles) :
                new ObjectParameter("Profiles", typeof(string));
    
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            var subActivityIdParameter = subActivityId.HasValue ?
                new ObjectParameter("SubActivityId", subActivityId) :
                new ObjectParameter("SubActivityId", typeof(int));
    
            var timesheetIdParameter = timesheetId.HasValue ?
                new ObjectParameter("TimesheetId", timesheetId) :
                new ObjectParameter("TimesheetId", typeof(int));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetUserEmailIdForNotification", userIdParameter, profilesParameter, notificationIdParameter, activityIdParameter, subActivityIdParameter, timesheetIdParameter, assignedToParameter);
        }
    
        public virtual ObjectResult<ActivityToSendNotification> usp_GetActivityToSendNotification(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActivityToSendNotification>("usp_GetActivityToSendNotification", userIdParameter);
        }
    
        public virtual ObjectResult<UserAssignedTaskDataForDropdown> usp_GetUserAssignedTaskDataForReports(Nullable<int> userId, string filterType, string siteFilterValue, string projectFilterValue, string areaFilterValue, Nullable<bool> isDEActivity, Nullable<bool> fromReport)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var siteFilterValueParameter = siteFilterValue != null ?
                new ObjectParameter("SiteFilterValue", siteFilterValue) :
                new ObjectParameter("SiteFilterValue", typeof(string));
    
            var projectFilterValueParameter = projectFilterValue != null ?
                new ObjectParameter("ProjectFilterValue", projectFilterValue) :
                new ObjectParameter("ProjectFilterValue", typeof(string));
    
            var areaFilterValueParameter = areaFilterValue != null ?
                new ObjectParameter("AreaFilterValue", areaFilterValue) :
                new ObjectParameter("AreaFilterValue", typeof(string));
    
            var isDEActivityParameter = isDEActivity.HasValue ?
                new ObjectParameter("IsDEActivity", isDEActivity) :
                new ObjectParameter("IsDEActivity", typeof(bool));
    
            var fromReportParameter = fromReport.HasValue ?
                new ObjectParameter("FromReport", fromReport) :
                new ObjectParameter("FromReport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserAssignedTaskDataForDropdown>("usp_GetUserAssignedTaskDataForReports", userIdParameter, filterTypeParameter, siteFilterValueParameter, projectFilterValueParameter, areaFilterValueParameter, isDEActivityParameter, fromReportParameter);
        }
    
        public virtual ObjectResult<TableMasterData> usp_GetTableMasterDataForDropdown(string filterFlag, string filterType, string site, string projectId, string areaId, string networkId, string activityId)
        {
            var filterFlagParameter = filterFlag != null ?
                new ObjectParameter("FilterFlag", filterFlag) :
                new ObjectParameter("FilterFlag", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TableMasterData>("usp_GetTableMasterDataForDropdown", filterFlagParameter, filterTypeParameter, siteParameter, projectIdParameter, areaIdParameter, networkIdParameter, activityIdParameter);
        }
    
        public virtual ObjectResult<DesignEnggActivityDetails> usp_GetDesignEnggActivityDetails(Nullable<int> userId, string areaId, string sAPSite, string projectId, string networkId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DesignEnggActivityDetails>("usp_GetDesignEnggActivityDetails", userIdParameter, areaIdParameter, sAPSiteParameter, projectIdParameter, networkIdParameter);
        }
    
        public virtual ObjectResult<DesignEngineerDocuments> usp_GetDesignEngineerDocuments(Nullable<int> activityId, Nullable<int> subActivityId, Nullable<int> userId)
        {
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            var subActivityIdParameter = subActivityId.HasValue ?
                new ObjectParameter("SubActivityId", subActivityId) :
                new ObjectParameter("SubActivityId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DesignEngineerDocuments>("usp_GetDesignEngineerDocuments", activityIdParameter, subActivityIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetSavedNumbersForValidation(Nullable<int> timesheetId, string subActivity, string activity, string network, Nullable<int> areaId, string project, string site, string flag)
        {
            var timesheetIdParameter = timesheetId.HasValue ?
                new ObjectParameter("TimesheetId", timesheetId) :
                new ObjectParameter("TimesheetId", typeof(int));
    
            var subActivityParameter = subActivity != null ?
                new ObjectParameter("SubActivity", subActivity) :
                new ObjectParameter("SubActivity", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var networkParameter = network != null ?
                new ObjectParameter("Network", network) :
                new ObjectParameter("Network", typeof(string));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetSavedNumbersForValidation", timesheetIdParameter, subActivityParameter, activityParameter, networkParameter, areaIdParameter, projectParameter, siteParameter, flagParameter);
        }
    
        public virtual ObjectResult<MobileDashbaord> usp_GetDataForMobileDashbaord(Nullable<int> userId, Nullable<bool> isFromMobile, string networkId, string areaId, string projectId, string sAPSite)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFromMobileParameter = isFromMobile.HasValue ?
                new ObjectParameter("IsFromMobile", isFromMobile) :
                new ObjectParameter("IsFromMobile", typeof(bool));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MobileDashbaord>("usp_GetDataForMobileDashbaord", userIdParameter, isFromMobileParameter, networkIdParameter, areaIdParameter, projectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<ContractorLaborDetails> usp_GetContractorLaborDetails(Nullable<int> userId, string site, string project, Nullable<int> area, string network, Nullable<System.DateTime> date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var networkParameter = network != null ?
                new ObjectParameter("Network", network) :
                new ObjectParameter("Network", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractorLaborDetails>("usp_GetContractorLaborDetails", userIdParameter, siteParameter, projectParameter, areaParameter, networkParameter, dateParameter);
        }
    
        public virtual ObjectResult<ManPowerMasterDetails> usp_GetManPowerMasterDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ManPowerMasterDetails>("usp_GetManPowerMasterDetails", userIdParameter);
        }
    
        public virtual ObjectResult<UserAssignedTaskDataNonDE> usp_GetUserAssignedTaskDataNonDE(Nullable<int> userId, string filterType, string siteFilterValue, string projectFilterValue, string areaFilterValue)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var siteFilterValueParameter = siteFilterValue != null ?
                new ObjectParameter("SiteFilterValue", siteFilterValue) :
                new ObjectParameter("SiteFilterValue", typeof(string));
    
            var projectFilterValueParameter = projectFilterValue != null ?
                new ObjectParameter("ProjectFilterValue", projectFilterValue) :
                new ObjectParameter("ProjectFilterValue", typeof(string));
    
            var areaFilterValueParameter = areaFilterValue != null ?
                new ObjectParameter("AreaFilterValue", areaFilterValue) :
                new ObjectParameter("AreaFilterValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserAssignedTaskDataNonDE>("usp_GetUserAssignedTaskDataNonDE", userIdParameter, filterTypeParameter, siteFilterValueParameter, projectFilterValueParameter, areaFilterValueParameter);
        }
    
        public virtual ObjectResult<usp_GetUpdatedTablesForOfflineSync_Result> usp_GetUpdatedTablesForOfflineSync(Nullable<System.DateTime> lastSyncDate)
        {
            var lastSyncDateParameter = lastSyncDate.HasValue ?
                new ObjectParameter("LastSyncDate", lastSyncDate) :
                new ObjectParameter("LastSyncDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUpdatedTablesForOfflineSync_Result>("usp_GetUpdatedTablesForOfflineSync", lastSyncDateParameter);
        }
    
        public virtual ObjectResult<usp_GetInvalidOfflineTimesheet_Result> usp_GetInvalidOfflineTimesheet(Nullable<int> userId, Nullable<bool> isFromMobile, string networkId, string areaId, string projectId, string sAPSite)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFromMobileParameter = isFromMobile.HasValue ?
                new ObjectParameter("IsFromMobile", isFromMobile) :
                new ObjectParameter("IsFromMobile", typeof(bool));
    
            var networkIdParameter = networkId != null ?
                new ObjectParameter("NetworkId", networkId) :
                new ObjectParameter("NetworkId", typeof(string));
    
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var projectIdParameter = projectId != null ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(string));
    
            var sAPSiteParameter = sAPSite != null ?
                new ObjectParameter("SAPSite", sAPSite) :
                new ObjectParameter("SAPSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetInvalidOfflineTimesheet_Result>("usp_GetInvalidOfflineTimesheet", userIdParameter, isFromMobileParameter, networkIdParameter, areaIdParameter, projectIdParameter, sAPSiteParameter);
        }
    
        public virtual ObjectResult<usp_GetSurveyDataForOfflineSync_Result> usp_GetSurveyDataForOfflineSync(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSurveyDataForOfflineSync_Result>("usp_GetSurveyDataForOfflineSync", userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTableActivityDataForOfflineSync_Result> usp_GetTableActivityDataForOfflineSync(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTableActivityDataForOfflineSync_Result>("usp_GetTableActivityDataForOfflineSync", userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTableMasterDataForOfflineSync_Result> usp_GetTableMasterDataForOfflineSync(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTableMasterDataForOfflineSync_Result>("usp_GetTableMasterDataForOfflineSync", userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetMaterialReportData_Result> usp_GetMaterialReportData(Nullable<int> userid, string site)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMaterialReportData_Result>("usp_GetMaterialReportData", useridParameter, siteParameter);
        }
    
        public virtual ObjectResult<usp_GetContractorForOfflineSync_Result> usp_GetContractorForOfflineSync(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetContractorForOfflineSync_Result>("usp_GetContractorForOfflineSync", userIdParameter);
        }
    
        public virtual ObjectResult<usp_SyncMasterDataForManPowerOffline_Result> usp_SyncMasterDataForManPowerOffline(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SyncMasterDataForManPowerOffline_Result>("usp_SyncMasterDataForManPowerOffline", userIdParameter);
        }
    }
}
